// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.2_01, build R40)
// Generated source version: 1.1.2

package org.egso.comms.pis.types;

import java.util.List;

import javax.xml.namespace.QName;

import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.DeserializationException;
import com.sun.xml.rpc.encoding.Initializable;
import com.sun.xml.rpc.encoding.InternalTypeMappingRegistry;
import com.sun.xml.rpc.encoding.SOAPDeserializationContext;
import com.sun.xml.rpc.encoding.SOAPSerializationContext;
import com.sun.xml.rpc.encoding.SerializationException;
import com.sun.xml.rpc.encoding.literal.LiteralObjectSerializerBase;
import com.sun.xml.rpc.streaming.XMLReader;
import com.sun.xml.rpc.streaming.XMLReaderUtil;
import com.sun.xml.rpc.streaming.XMLWriter;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;

public class Message_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable  {
    private static final QName ns1_header_QNAME = new QName("", "header");
    private static final QName ns3_Header_TYPE_QNAME = new QName("urn:org.egso.comms/pis/types/", "Header");
    private CombinedSerializer ns3_myHeader_LiteralSerializer;
    private static final QName ns1_body_QNAME = new QName("", "body");
    private static final QName ns2_anyType_TYPE_QNAME = SchemaConstants.QNAME_TYPE_URTYPE;
    private CombinedSerializer ns2_ns2_anyType_TYPE_QNAME_Serializer;
    
    public Message_LiteralSerializer(QName type, String encodingStyle) {
        this(type, encodingStyle, false);
    }
    
    public Message_LiteralSerializer(QName type, String encodingStyle, boolean encodeType) {
        super(type, true, encodingStyle, encodeType);
    }
    
    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns3_myHeader_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.egso.comms.pis.types.Header.class, ns3_Header_TYPE_QNAME);
        ns2_ns2_anyType_TYPE_QNAME_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.soap.SOAPElement.class, ns2_anyType_TYPE_QNAME);
    }
    
    public Object doDeserialize(XMLReader reader,
        SOAPDeserializationContext context) throws Exception {
        org.egso.comms.pis.types.Message instance = new org.egso.comms.pis.types.Message();
        Object member=null;
        QName elementName;
        List values;
        Object value;
        
        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_header_QNAME)) {
                member = ns3_myHeader_LiteralSerializer.deserialize(ns1_header_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setHeader((org.egso.comms.pis.types.Header)member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_header_QNAME, reader.getName() });
            }
        }
        else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_body_QNAME)) {
                member = ns2_ns2_anyType_TYPE_QNAME_Serializer.deserialize(ns1_body_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setBody((javax.xml.soap.SOAPElement)member);
                reader.nextElementContent();
            }
        }
        
        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (Object)instance;
    }
    
    public void doSerializeAttributes(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        org.egso.comms.pis.types.Message instance = (org.egso.comms.pis.types.Message)obj;
        
    }
    public void doSerialize(Object obj, XMLWriter writer, SOAPSerializationContext context) throws Exception {
        org.egso.comms.pis.types.Message instance = (org.egso.comms.pis.types.Message)obj;
        
        if (instance.getHeader() == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns3_myHeader_LiteralSerializer.serialize(instance.getHeader(), ns1_header_QNAME, null, writer, context);
        if (instance.getBody() != null) {
            ns2_ns2_anyType_TYPE_QNAME_Serializer.serialize(instance.getBody(), ns1_body_QNAME, null, writer, context);
        }
    }
}
