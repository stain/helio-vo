// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.2_01, build R40)
// Generated source version: 1.1.2

package org.egso.comms.log.wsdl;

import java.lang.reflect.Method;

import javax.xml.namespace.QName;

import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.InternalTypeMappingRegistry;
import com.sun.xml.rpc.encoding.SOAPDeserializationContext;
import com.sun.xml.rpc.encoding.SOAPDeserializationState;
import com.sun.xml.rpc.encoding.SOAPFaultInfoSerializer;
import com.sun.xml.rpc.encoding.SerializerConstants;
import com.sun.xml.rpc.server.StreamingHandlerState;
import com.sun.xml.rpc.soap.message.InternalSOAPMessage;
import com.sun.xml.rpc.soap.message.SOAPBlockInfo;
import com.sun.xml.rpc.soap.message.SOAPFaultInfo;
import com.sun.xml.rpc.soap.message.SOAPHeaderBlockInfo;
import com.sun.xml.rpc.soap.streaming.SOAPProtocolViolationException;
import com.sun.xml.rpc.streaming.XMLReader;

public class Logging_PortType_Tie
    extends com.sun.xml.rpc.server.TieBase implements SerializerConstants {
    
    
    
    public Logging_PortType_Tie() throws Exception {
        super(new org.egso.comms.log.wsdl.Logging_Service_SerializerRegistry().getRegistry());
        initialize(internalTypeMappingRegistry);
    }
    
    /*
     * This method does the actual method invocation for operation: appendEvents
     */
    private void invoke_appendEvents(StreamingHandlerState state) throws Exception {
        
        flushHttpResponse(state);
        org.egso.comms.log.types.EventList myEventList = null;
        Object myEventListObj =
            state.getRequest().getBody().getValue();
        
        if (myEventListObj instanceof SOAPDeserializationState) {
            myEventList = (org.egso.comms.log.types.EventList)((SOAPDeserializationState)myEventListObj).getInstance();
        } else {
            myEventList = (org.egso.comms.log.types.EventList)myEventListObj;
        }
        
        try {
            ((org.egso.comms.log.wsdl.Logging_PortType) getTarget()).appendEvents(myEventList);
            
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: createLog
     */
    private void invoke_createLog(StreamingHandlerState state) throws Exception {
        
        org.egso.comms.log.types.Log myLog = null;
        Object myLogObj =
            state.getRequest().getBody().getValue();
        
        if (myLogObj instanceof SOAPDeserializationState) {
            myLog = (org.egso.comms.log.types.Log)((SOAPDeserializationState)myLogObj).getInstance();
        } else {
            myLog = (org.egso.comms.log.types.Log)myLogObj;
        }
        
        try {
            org.egso.comms.log.types.Log log = ((org.egso.comms.log.wsdl.Logging_PortType) getTarget()).createLog(myLog);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.log.types.Log _response = log;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_createLog_log_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myLog_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method must determine the opcode of the operation that has been invoked.
     */
    protected void peekFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        if (bodyReader.getName().equals(ns1_appendEvents_appendEvents_QNAME)) {
            state.getRequest().setOperationCode(appendEvents_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_createLog_createLog_QNAME)) {
            state.getRequest().setOperationCode(createLog_OPCODE);
        }
        else {
            throw new SOAPProtocolViolationException("soap.operation.unrecognized", bodyReader.getName().toString());
        }
    }
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case appendEvents_OPCODE:
                deserialize_appendEvents(bodyReader, deserializationContext, state);
                break;
            case createLog_OPCODE:
                deserialize_createLog(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", Integer.toString(opcode));
        }
    }
    
    
    
    /*
     * This method deserializes the body of the appendEvents operation.
     */
    private void deserialize_appendEvents(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myEventListObj =
            ns1_myEventList_LiteralSerializer.deserialize(ns1_appendEvents_appendEvents_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_appendEvents_appendEvents_QNAME);
        bodyBlock.setValue(myEventListObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the createLog operation.
     */
    private void deserialize_createLog(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myLogObj =
            ns1_myLog_LiteralSerializer.deserialize(ns1_createLog_createLog_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_createLog_createLog_QNAME);
        bodyBlock.setValue(myLogObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    
    /*
     * This method must invoke the correct method on the servant based on the opcode.
     */
    protected void processingHook(StreamingHandlerState state) throws Exception {
        switch (state.getRequest().getOperationCode()) {
            case appendEvents_OPCODE:
                invoke_appendEvents(state);
                break;
            case createLog_OPCODE:
                invoke_createLog(state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", Integer.toString(state.getRequest().getOperationCode()));
        }
    }
    
    protected String getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public String getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    
    /*
     * This method must determine the opcode of the operation given the QName of the first body element.
     */
    public int getOpcodeForFirstBodyElementName(QName name) {
        if (name == null) {
            return InternalSOAPMessage.NO_OPERATION;
        }
        if (name.equals(ns1_appendEvents_appendEvents_QNAME)) {
            return appendEvents_OPCODE;
        }
        if (name.equals(ns1_createLog_createLog_QNAME)) {
            return createLog_OPCODE;
        }
        return super.getOpcodeForFirstBodyElementName(name);
    }
    
    
    private Method internalGetMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
        
        Method theMethod = null;
        
        switch(opcode) {
            case appendEvents_OPCODE:
                {
                    Class[] carray = { org.egso.comms.log.types.EventList.class };
                    theMethod = (org.egso.comms.log.wsdl.Logging_PortType.class).getMethod("appendEvents", carray);
                }
                break;
            
            case createLog_OPCODE:
                {
                    Class[] carray = { org.egso.comms.log.types.Log.class };
                    theMethod = (org.egso.comms.log.wsdl.Logging_PortType.class).getMethod("createLog", carray);
                }
                break;
            
            default:
        }
        return theMethod;
    }
    
    private Method[] methodMap = new Method[2];
    
    /*
     * This method returns the Method Obj for a specified opcode.
     */
    public Method getMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
         
        if (opcode <= InternalSOAPMessage.NO_OPERATION ) {
            return null;
        }
         
        if (opcode >= 2 ) {
            return null;
        }
         
        if (methodMap[opcode] == null)  {
            methodMap[opcode] = internalGetMethodForOpcode(opcode);
        }
         
        return methodMap[opcode];
    }
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    private void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns1_myLog_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.egso.comms.log.types.Log.class, ns1_Log_TYPE_QNAME);
        ns1_myEventList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.egso.comms.log.types.EventList.class, ns1_EventList_TYPE_QNAME);
    }
    
    private static final QName portName = new QName("urn:org.egso.comms/log/wsdl/Logging", "LoggingPort");
    private static final int appendEvents_OPCODE = 0;
    private static final int createLog_OPCODE = 1;
    private static final QName ns1_appendEvents_appendEvents_QNAME = new QName("urn:org.egso.comms/log/types/", "appendEvents");
    private static final QName ns1_EventList_TYPE_QNAME = new QName("urn:org.egso.comms/log/types/", "EventList");
    private CombinedSerializer ns1_myEventList_LiteralSerializer;
    private static final QName ns1_createLog_createLog_QNAME = new QName("urn:org.egso.comms/log/types/", "createLog");
    private static final QName ns1_Log_TYPE_QNAME = new QName("urn:org.egso.comms/log/types/", "Log");
    private CombinedSerializer ns1_myLog_LiteralSerializer;
    private static final QName ns1_createLog_log_QNAME = new QName("urn:org.egso.comms/log/types/", "log");
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "urn:org.egso.comms/log/types/"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
