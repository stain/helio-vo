// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.2_01, build R40)
// Generated source version: 1.1.2

package org.egso.comms.nds.wsdl;

import java.lang.reflect.Method;

import javax.xml.namespace.QName;

import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.DummySerializer;
import com.sun.xml.rpc.encoding.InternalTypeMappingRegistry;
import com.sun.xml.rpc.encoding.SOAPDeserializationContext;
import com.sun.xml.rpc.encoding.SOAPDeserializationState;
import com.sun.xml.rpc.encoding.SOAPFaultInfoSerializer;
import com.sun.xml.rpc.encoding.SerializerConstants;
import com.sun.xml.rpc.server.StreamingHandlerState;
import com.sun.xml.rpc.soap.message.InternalSOAPMessage;
import com.sun.xml.rpc.soap.message.SOAPBlockInfo;
import com.sun.xml.rpc.soap.message.SOAPFaultInfo;
import com.sun.xml.rpc.soap.message.SOAPHeaderBlockInfo;
import com.sun.xml.rpc.soap.streaming.SOAPProtocolViolationException;
import com.sun.xml.rpc.streaming.XMLReader;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;

public class NDS_PortType_Tie
    extends com.sun.xml.rpc.server.TieBase implements SerializerConstants {
    
    
    
    public NDS_PortType_Tie() throws Exception {
        super(new org.egso.comms.nds.wsdl.NDS_Service_SerializerRegistry().getRegistry());
        initialize(internalTypeMappingRegistry);
    }
    
    /*
     * This method does the actual method invocation for operation: deregisterApplication
     */
    private void invoke_deregisterApplication(StreamingHandlerState state) throws Exception {
        
        org.egso.comms.nds.types.Application myApplication = null;
        Object myApplicationObj =
            state.getRequest().getBody().getValue();
        
        if (myApplicationObj instanceof SOAPDeserializationState) {
            myApplication = (org.egso.comms.nds.types.Application)((SOAPDeserializationState)myApplicationObj).getInstance();
        } else {
            myApplication = (org.egso.comms.nds.types.Application)myApplicationObj;
        }
        
        try {
            ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).deregisterApplication(myApplication);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
            bodyBlock.setSerializer(DummySerializer.getInstance());
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: selectPISByEndpoint
     */
    private void invoke_selectPISByEndpoint(StreamingHandlerState state) throws Exception {
        
        java.net.URI myURI = null;
        Object myURIObj =
            state.getRequest().getBody().getValue();
        
        if (myURIObj instanceof SOAPDeserializationState) {
            myURI = (java.net.URI)((SOAPDeserializationState)myURIObj).getInstance();
        } else {
            myURI = (java.net.URI)myURIObj;
        }
        
        try {
            org.egso.comms.nds.types.PISList pisList = ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).selectPISByEndpoint(myURI);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.nds.types.PISList _response = pisList;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISByEndpoint_pisList_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myPISList_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: selectApplicationById
     */
    private void invoke_selectApplicationById(StreamingHandlerState state) throws Exception {
        
        java.lang.String myString = null;
        Object myStringObj =
            state.getRequest().getBody().getValue();
        
        if (myStringObj instanceof SOAPDeserializationState) {
            myString = (java.lang.String)((SOAPDeserializationState)myStringObj).getInstance();
        } else {
            myString = (java.lang.String)myStringObj;
        }
        
        try {
            org.egso.comms.nds.types.Application application = ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).selectApplicationById(myString);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.nds.types.Application _response = application;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationById_application_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myApplication_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: registerApplication
     */
    private void invoke_registerApplication(StreamingHandlerState state) throws Exception {
        
        org.egso.comms.nds.types.Application myApplication = null;
        Object myApplicationObj =
            state.getRequest().getBody().getValue();
        
        if (myApplicationObj instanceof SOAPDeserializationState) {
            myApplication = (org.egso.comms.nds.types.Application)((SOAPDeserializationState)myApplicationObj).getInstance();
        } else {
            myApplication = (org.egso.comms.nds.types.Application)myApplicationObj;
        }
        
        try {
            org.egso.comms.nds.types.Application application = ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).registerApplication(myApplication);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.nds.types.Application _response = application;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_registerApplication_application_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myApplication_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: selectApplicationsByName
     */
    private void invoke_selectApplicationsByName(StreamingHandlerState state) throws Exception {
        
        java.lang.String myString = null;
        Object myStringObj =
            state.getRequest().getBody().getValue();
        
        if (myStringObj instanceof SOAPDeserializationState) {
            myString = (java.lang.String)((SOAPDeserializationState)myStringObj).getInstance();
        } else {
            myString = (java.lang.String)myStringObj;
        }
        
        try {
            org.egso.comms.nds.types.ApplicationList applicationList = ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).selectApplicationsByName(myString);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.nds.types.ApplicationList _response = applicationList;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByName_applicationList_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myApplicationList_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: updateApplication
     */
    private void invoke_updateApplication(StreamingHandlerState state) throws Exception {
        
        org.egso.comms.nds.types.Application myApplication = null;
        Object myApplicationObj =
            state.getRequest().getBody().getValue();
        
        if (myApplicationObj instanceof SOAPDeserializationState) {
            myApplication = (org.egso.comms.nds.types.Application)((SOAPDeserializationState)myApplicationObj).getInstance();
        } else {
            myApplication = (org.egso.comms.nds.types.Application)myApplicationObj;
        }
        
        try {
            ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).updateApplication(myApplication);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
            bodyBlock.setSerializer(DummySerializer.getInstance());
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: selectApplicationsByAlive
     */
    private void invoke_selectApplicationsByAlive(StreamingHandlerState state) throws Exception {
        
        boolean myboolean = false;
        Object mybooleanObj =
            state.getRequest().getBody().getValue();
        
        if (mybooleanObj instanceof SOAPDeserializationState) {
            myboolean = ((Boolean)((SOAPDeserializationState)mybooleanObj).getInstance()).booleanValue();
        } else {
            myboolean = ((Boolean)mybooleanObj).booleanValue();
        }
        
        try {
            org.egso.comms.nds.types.ApplicationList applicationList = ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).selectApplicationsByAlive(myboolean);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.nds.types.ApplicationList _response = applicationList;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByAlive_applicationList_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myApplicationList_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: selectPISByApplicationId
     */
    private void invoke_selectPISByApplicationId(StreamingHandlerState state) throws Exception {
        
        java.lang.String myString = null;
        Object myStringObj =
            state.getRequest().getBody().getValue();
        
        if (myStringObj instanceof SOAPDeserializationState) {
            myString = (java.lang.String)((SOAPDeserializationState)myStringObj).getInstance();
        } else {
            myString = (java.lang.String)myStringObj;
        }
        
        try {
            org.egso.comms.nds.types.PISList pisList = ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).selectPISByApplicationId(myString);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.nds.types.PISList _response = pisList;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISByApplicationId_pisList_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myPISList_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: selectApplicationsByEndpoint
     */
    private void invoke_selectApplicationsByEndpoint(StreamingHandlerState state) throws Exception {
        
        java.net.URI myURI = null;
        Object myURIObj =
            state.getRequest().getBody().getValue();
        
        if (myURIObj instanceof SOAPDeserializationState) {
            myURI = (java.net.URI)((SOAPDeserializationState)myURIObj).getInstance();
        } else {
            myURI = (java.net.URI)myURIObj;
        }
        
        try {
            org.egso.comms.nds.types.ApplicationList applicationList = ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).selectApplicationsByEndpoint(myURI);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.nds.types.ApplicationList _response = applicationList;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByEndpoint_applicationList_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myApplicationList_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: selectPISByAlive
     */
    private void invoke_selectPISByAlive(StreamingHandlerState state) throws Exception {
        
        boolean myboolean = false;
        Object mybooleanObj =
            state.getRequest().getBody().getValue();
        
        if (mybooleanObj instanceof SOAPDeserializationState) {
            myboolean = ((Boolean)((SOAPDeserializationState)mybooleanObj).getInstance()).booleanValue();
        } else {
            myboolean = ((Boolean)mybooleanObj).booleanValue();
        }
        
        try {
            org.egso.comms.nds.types.PISList pisList = ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).selectPISByAlive(myboolean);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.nds.types.PISList _response = pisList;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISByAlive_pisList_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myPISList_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: updatePIS
     */
    private void invoke_updatePIS(StreamingHandlerState state) throws Exception {
        
        org.egso.comms.nds.types.PIS myPIS = null;
        Object myPISObj =
            state.getRequest().getBody().getValue();
        
        if (myPISObj instanceof SOAPDeserializationState) {
            myPIS = (org.egso.comms.nds.types.PIS)((SOAPDeserializationState)myPISObj).getInstance();
        } else {
            myPIS = (org.egso.comms.nds.types.PIS)myPISObj;
        }
        
        try {
            ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).updatePIS(myPIS);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
            bodyBlock.setSerializer(DummySerializer.getInstance());
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: deregisterPIS
     */
    private void invoke_deregisterPIS(StreamingHandlerState state) throws Exception {
        
        org.egso.comms.nds.types.PIS myPIS = null;
        Object myPISObj =
            state.getRequest().getBody().getValue();
        
        if (myPISObj instanceof SOAPDeserializationState) {
            myPIS = (org.egso.comms.nds.types.PIS)((SOAPDeserializationState)myPISObj).getInstance();
        } else {
            myPIS = (org.egso.comms.nds.types.PIS)myPISObj;
        }
        
        try {
            ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).deregisterPIS(myPIS);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
            bodyBlock.setSerializer(DummySerializer.getInstance());
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: selectPISById
     */
    private void invoke_selectPISById(StreamingHandlerState state) throws Exception {
        
        java.lang.String myString = null;
        Object myStringObj =
            state.getRequest().getBody().getValue();
        
        if (myStringObj instanceof SOAPDeserializationState) {
            myString = (java.lang.String)((SOAPDeserializationState)myStringObj).getInstance();
        } else {
            myString = (java.lang.String)myStringObj;
        }
        
        try {
            org.egso.comms.nds.types.PIS pis = ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).selectPISById(myString);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.nds.types.PIS _response = pis;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISById_pis_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myPIS_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: selectPISByName
     */
    private void invoke_selectPISByName(StreamingHandlerState state) throws Exception {
        
        java.lang.String myString = null;
        Object myStringObj =
            state.getRequest().getBody().getValue();
        
        if (myStringObj instanceof SOAPDeserializationState) {
            myString = (java.lang.String)((SOAPDeserializationState)myStringObj).getInstance();
        } else {
            myString = (java.lang.String)myStringObj;
        }
        
        try {
            org.egso.comms.nds.types.PISList pisList = ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).selectPISByName(myString);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.nds.types.PISList _response = pisList;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISByName_pisList_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myPISList_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: selectApplicationsByType
     */
    private void invoke_selectApplicationsByType(StreamingHandlerState state) throws Exception {
        
        java.net.URI myURI = null;
        Object myURIObj =
            state.getRequest().getBody().getValue();
        
        if (myURIObj instanceof SOAPDeserializationState) {
            myURI = (java.net.URI)((SOAPDeserializationState)myURIObj).getInstance();
        } else {
            myURI = (java.net.URI)myURIObj;
        }
        
        try {
            org.egso.comms.nds.types.ApplicationList applicationList = ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).selectApplicationsByType(myURI);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.nds.types.ApplicationList _response = applicationList;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByType_applicationList_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myApplicationList_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: selectApplicationsByParentPISId
     */
    private void invoke_selectApplicationsByParentPISId(StreamingHandlerState state) throws Exception {
        
        java.lang.String myString = null;
        Object myStringObj =
            state.getRequest().getBody().getValue();
        
        if (myStringObj instanceof SOAPDeserializationState) {
            myString = (java.lang.String)((SOAPDeserializationState)myStringObj).getInstance();
        } else {
            myString = (java.lang.String)myStringObj;
        }
        
        try {
            org.egso.comms.nds.types.ApplicationList applicationList = ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).selectApplicationsByParentPISId(myString);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.nds.types.ApplicationList _response = applicationList;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByParentPISId_applicationList_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myApplicationList_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: registerPIS
     */
    private void invoke_registerPIS(StreamingHandlerState state) throws Exception {
        
        org.egso.comms.nds.types.PIS myPIS = null;
        Object myPISObj =
            state.getRequest().getBody().getValue();
        
        if (myPISObj instanceof SOAPDeserializationState) {
            myPIS = (org.egso.comms.nds.types.PIS)((SOAPDeserializationState)myPISObj).getInstance();
        } else {
            myPIS = (org.egso.comms.nds.types.PIS)myPISObj;
        }
        
        try {
            org.egso.comms.nds.types.PIS pis = ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).registerPIS(myPIS);
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            org.egso.comms.nds.types.PIS _response = pis;
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_registerPIS_pis_QNAME);
            bodyBlock.setValue(_response);
            bodyBlock.setSerializer(ns1_myPIS_LiteralSerializer);
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method does the actual method invocation for operation: synchronizeDirectory
     */
    private void invoke_synchronizeDirectory(StreamingHandlerState state) throws Exception {
        
        try {
            ((org.egso.comms.nds.wsdl.NDS_PortType) getTarget()).synchronizeDirectory();
            
            SOAPHeaderBlockInfo headerInfo;
            
            
            SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
            bodyBlock.setSerializer(DummySerializer.getInstance());
            state.getResponse().setBody(bodyBlock);
        } catch (javax.xml.rpc.soap.SOAPFaultException e) {
            SOAPFaultInfo fault = new SOAPFaultInfo(e.getFaultCode(),
                e.getFaultString(), e.getFaultActor(), e.getDetail());
            SOAPBlockInfo faultBlock = new SOAPBlockInfo(com.sun.xml.rpc.encoding.soap.SOAPConstants.QNAME_SOAP_FAULT);
            faultBlock.setValue(fault);
            faultBlock.setSerializer(new SOAPFaultInfoSerializer(false, e.getDetail()==null));
            state.getResponse().setBody(faultBlock);
            state.getResponse().setFailure(true);
        }
    }
    
    /*
     * This method must determine the opcode of the operation that has been invoked.
     */
    protected void peekFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        if (bodyReader.getName().equals(ns1_deregisterApplication_deregisterApplication_QNAME)) {
            state.getRequest().setOperationCode(deregisterApplication_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_selectPISByEndpoint_selectPISByEndpoint_QNAME)) {
            state.getRequest().setOperationCode(selectPISByEndpoint_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_selectApplicationById_selectApplicationsById_QNAME)) {
            state.getRequest().setOperationCode(selectApplicationById_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_registerApplication_registerApplication_QNAME)) {
            state.getRequest().setOperationCode(registerApplication_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_selectApplicationsByName_selectApplicationsByName_QNAME)) {
            state.getRequest().setOperationCode(selectApplicationsByName_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_updateApplication_updateApplication_QNAME)) {
            state.getRequest().setOperationCode(updateApplication_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_selectApplicationsByAlive_selectApplicationsByAlive_QNAME)) {
            state.getRequest().setOperationCode(selectApplicationsByAlive_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_selectPISByApplicationId_selectPISByApplicationId_QNAME)) {
            state.getRequest().setOperationCode(selectPISByApplicationId_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_selectApplicationsByEndpoint_selectApplicationsByEndpoint_QNAME)) {
            state.getRequest().setOperationCode(selectApplicationsByEndpoint_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_selectPISByAlive_selectPISByAlive_QNAME)) {
            state.getRequest().setOperationCode(selectPISByAlive_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_updatePIS_updatePIS_QNAME)) {
            state.getRequest().setOperationCode(updatePIS_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_deregisterPIS_deregisterPIS_QNAME)) {
            state.getRequest().setOperationCode(deregisterPIS_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_selectPISById_selectPISById_QNAME)) {
            state.getRequest().setOperationCode(selectPISById_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_selectPISByName_selectPISByName_QNAME)) {
            state.getRequest().setOperationCode(selectPISByName_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_selectApplicationsByType_selectApplicationsByType_QNAME)) {
            state.getRequest().setOperationCode(selectApplicationsByType_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_selectApplicationsByParentPISId_selectApplicationsByParentPISId_QNAME)) {
            state.getRequest().setOperationCode(selectApplicationsByParentPISId_OPCODE);
        }
        else if (bodyReader.getName().equals(ns1_registerPIS_registerPIS_QNAME)) {
            state.getRequest().setOperationCode(registerPIS_OPCODE);
        }
        else {
            throw new SOAPProtocolViolationException("soap.operation.unrecognized", bodyReader.getName().toString());
        }
    }
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case deregisterApplication_OPCODE:
                deserialize_deregisterApplication(bodyReader, deserializationContext, state);
                break;
            case selectPISByEndpoint_OPCODE:
                deserialize_selectPISByEndpoint(bodyReader, deserializationContext, state);
                break;
            case selectApplicationById_OPCODE:
                deserialize_selectApplicationById(bodyReader, deserializationContext, state);
                break;
            case registerApplication_OPCODE:
                deserialize_registerApplication(bodyReader, deserializationContext, state);
                break;
            case selectApplicationsByName_OPCODE:
                deserialize_selectApplicationsByName(bodyReader, deserializationContext, state);
                break;
            case updateApplication_OPCODE:
                deserialize_updateApplication(bodyReader, deserializationContext, state);
                break;
            case selectApplicationsByAlive_OPCODE:
                deserialize_selectApplicationsByAlive(bodyReader, deserializationContext, state);
                break;
            case selectPISByApplicationId_OPCODE:
                deserialize_selectPISByApplicationId(bodyReader, deserializationContext, state);
                break;
            case selectApplicationsByEndpoint_OPCODE:
                deserialize_selectApplicationsByEndpoint(bodyReader, deserializationContext, state);
                break;
            case selectPISByAlive_OPCODE:
                deserialize_selectPISByAlive(bodyReader, deserializationContext, state);
                break;
            case updatePIS_OPCODE:
                deserialize_updatePIS(bodyReader, deserializationContext, state);
                break;
            case deregisterPIS_OPCODE:
                deserialize_deregisterPIS(bodyReader, deserializationContext, state);
                break;
            case selectPISById_OPCODE:
                deserialize_selectPISById(bodyReader, deserializationContext, state);
                break;
            case selectPISByName_OPCODE:
                deserialize_selectPISByName(bodyReader, deserializationContext, state);
                break;
            case selectApplicationsByType_OPCODE:
                deserialize_selectApplicationsByType(bodyReader, deserializationContext, state);
                break;
            case selectApplicationsByParentPISId_OPCODE:
                deserialize_selectApplicationsByParentPISId(bodyReader, deserializationContext, state);
                break;
            case registerPIS_OPCODE:
                deserialize_registerPIS(bodyReader, deserializationContext, state);
                break;
            case synchronizeDirectory_OPCODE:
                deserialize_synchronizeDirectory(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", Integer.toString(opcode));
        }
    }
    /*
     * This method handles the case of an empty SOAP body.
     */
    protected void handleEmptyBody(XMLReader reader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        state.getRequest().setOperationCode(synchronizeDirectory_OPCODE);
    }
    
    
    
    /*
     * This method deserializes the body of the deregisterApplication operation.
     */
    private void deserialize_deregisterApplication(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myApplicationObj =
            ns1_myApplication_LiteralSerializer.deserialize(ns1_deregisterApplication_deregisterApplication_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deregisterApplication_deregisterApplication_QNAME);
        bodyBlock.setValue(myApplicationObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectPISByEndpoint operation.
     */
    private void deserialize_selectPISByEndpoint(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myURIObj =
            ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer.deserialize(ns1_selectPISByEndpoint_selectPISByEndpoint_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISByEndpoint_selectPISByEndpoint_QNAME);
        bodyBlock.setValue(myURIObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectApplicationById operation.
     */
    private void deserialize_selectApplicationById(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myStringObj =
            ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_selectApplicationById_selectApplicationsById_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationById_selectApplicationsById_QNAME);
        bodyBlock.setValue(myStringObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the registerApplication operation.
     */
    private void deserialize_registerApplication(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myApplicationObj =
            ns1_myApplication_LiteralSerializer.deserialize(ns1_registerApplication_registerApplication_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_registerApplication_registerApplication_QNAME);
        bodyBlock.setValue(myApplicationObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectApplicationsByName operation.
     */
    private void deserialize_selectApplicationsByName(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myStringObj =
            ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_selectApplicationsByName_selectApplicationsByName_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByName_selectApplicationsByName_QNAME);
        bodyBlock.setValue(myStringObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the updateApplication operation.
     */
    private void deserialize_updateApplication(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myApplicationObj =
            ns1_myApplication_LiteralSerializer.deserialize(ns1_updateApplication_updateApplication_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_updateApplication_updateApplication_QNAME);
        bodyBlock.setValue(myApplicationObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectApplicationsByAlive operation.
     */
    private void deserialize_selectApplicationsByAlive(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object mybooleanObj =
            ns2_myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_selectApplicationsByAlive_selectApplicationsByAlive_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByAlive_selectApplicationsByAlive_QNAME);
        bodyBlock.setValue(mybooleanObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectPISByApplicationId operation.
     */
    private void deserialize_selectPISByApplicationId(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myStringObj =
            ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_selectPISByApplicationId_selectPISByApplicationId_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISByApplicationId_selectPISByApplicationId_QNAME);
        bodyBlock.setValue(myStringObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectApplicationsByEndpoint operation.
     */
    private void deserialize_selectApplicationsByEndpoint(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myURIObj =
            ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer.deserialize(ns1_selectApplicationsByEndpoint_selectApplicationsByEndpoint_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByEndpoint_selectApplicationsByEndpoint_QNAME);
        bodyBlock.setValue(myURIObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectPISByAlive operation.
     */
    private void deserialize_selectPISByAlive(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object mybooleanObj =
            ns2_myns2__boolean__boolean_Boolean_Serializer.deserialize(ns1_selectPISByAlive_selectPISByAlive_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISByAlive_selectPISByAlive_QNAME);
        bodyBlock.setValue(mybooleanObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the updatePIS operation.
     */
    private void deserialize_updatePIS(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myPISObj =
            ns1_myPIS_LiteralSerializer.deserialize(ns1_updatePIS_updatePIS_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_updatePIS_updatePIS_QNAME);
        bodyBlock.setValue(myPISObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deregisterPIS operation.
     */
    private void deserialize_deregisterPIS(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myPISObj =
            ns1_myPIS_LiteralSerializer.deserialize(ns1_deregisterPIS_deregisterPIS_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_deregisterPIS_deregisterPIS_QNAME);
        bodyBlock.setValue(myPISObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectPISById operation.
     */
    private void deserialize_selectPISById(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myStringObj =
            ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_selectPISById_selectPISById_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISById_selectPISById_QNAME);
        bodyBlock.setValue(myStringObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectPISByName operation.
     */
    private void deserialize_selectPISByName(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myStringObj =
            ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_selectPISByName_selectPISByName_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISByName_selectPISByName_QNAME);
        bodyBlock.setValue(myStringObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectApplicationsByType operation.
     */
    private void deserialize_selectApplicationsByType(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myURIObj =
            ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer.deserialize(ns1_selectApplicationsByType_selectApplicationsByType_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByType_selectApplicationsByType_QNAME);
        bodyBlock.setValue(myURIObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectApplicationsByParentPISId operation.
     */
    private void deserialize_selectApplicationsByParentPISId(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myStringObj =
            ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_selectApplicationsByParentPISId_selectApplicationsByParentPISId_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByParentPISId_selectApplicationsByParentPISId_QNAME);
        bodyBlock.setValue(myStringObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the registerPIS operation.
     */
    private void deserialize_registerPIS(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        Object myPISObj =
            ns1_myPIS_LiteralSerializer.deserialize(ns1_registerPIS_registerPIS_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_registerPIS_registerPIS_QNAME);
        bodyBlock.setValue(myPISObj);
        state.getRequest().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the synchronizeDirectory operation.
     */
    private void deserialize_synchronizeDirectory(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingHandlerState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getRequest().setBody(bodyBlock);
    }
    
    
    /*
     * This method must invoke the correct method on the servant based on the opcode.
     */
    protected void processingHook(StreamingHandlerState state) throws Exception {
        switch (state.getRequest().getOperationCode()) {
            case deregisterApplication_OPCODE:
                invoke_deregisterApplication(state);
                break;
            case selectPISByEndpoint_OPCODE:
                invoke_selectPISByEndpoint(state);
                break;
            case selectApplicationById_OPCODE:
                invoke_selectApplicationById(state);
                break;
            case registerApplication_OPCODE:
                invoke_registerApplication(state);
                break;
            case selectApplicationsByName_OPCODE:
                invoke_selectApplicationsByName(state);
                break;
            case updateApplication_OPCODE:
                invoke_updateApplication(state);
                break;
            case selectApplicationsByAlive_OPCODE:
                invoke_selectApplicationsByAlive(state);
                break;
            case selectPISByApplicationId_OPCODE:
                invoke_selectPISByApplicationId(state);
                break;
            case selectApplicationsByEndpoint_OPCODE:
                invoke_selectApplicationsByEndpoint(state);
                break;
            case selectPISByAlive_OPCODE:
                invoke_selectPISByAlive(state);
                break;
            case updatePIS_OPCODE:
                invoke_updatePIS(state);
                break;
            case deregisterPIS_OPCODE:
                invoke_deregisterPIS(state);
                break;
            case selectPISById_OPCODE:
                invoke_selectPISById(state);
                break;
            case selectPISByName_OPCODE:
                invoke_selectPISByName(state);
                break;
            case selectApplicationsByType_OPCODE:
                invoke_selectApplicationsByType(state);
                break;
            case selectApplicationsByParentPISId_OPCODE:
                invoke_selectApplicationsByParentPISId(state);
                break;
            case registerPIS_OPCODE:
                invoke_registerPIS(state);
                break;
            case synchronizeDirectory_OPCODE:
                invoke_synchronizeDirectory(state);
                break;
            default:
                throw new SOAPProtocolViolationException("soap.operation.unrecognized", Integer.toString(state.getRequest().getOperationCode()));
        }
    }
    
    protected String getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public String getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    
    /*
     * This method must determine the opcode of the operation given the QName of the first body element.
     */
    public int getOpcodeForFirstBodyElementName(QName name) {
        if (name == null) {
            return InternalSOAPMessage.NO_OPERATION;
        }
        if (name.equals(ns1_deregisterApplication_deregisterApplication_QNAME)) {
            return deregisterApplication_OPCODE;
        }
        if (name.equals(ns1_selectPISByEndpoint_selectPISByEndpoint_QNAME)) {
            return selectPISByEndpoint_OPCODE;
        }
        if (name.equals(ns1_selectApplicationById_selectApplicationsById_QNAME)) {
            return selectApplicationById_OPCODE;
        }
        if (name.equals(ns1_registerApplication_registerApplication_QNAME)) {
            return registerApplication_OPCODE;
        }
        if (name.equals(ns1_selectApplicationsByName_selectApplicationsByName_QNAME)) {
            return selectApplicationsByName_OPCODE;
        }
        if (name.equals(ns1_updateApplication_updateApplication_QNAME)) {
            return updateApplication_OPCODE;
        }
        if (name.equals(ns1_selectApplicationsByAlive_selectApplicationsByAlive_QNAME)) {
            return selectApplicationsByAlive_OPCODE;
        }
        if (name.equals(ns1_selectPISByApplicationId_selectPISByApplicationId_QNAME)) {
            return selectPISByApplicationId_OPCODE;
        }
        if (name.equals(ns1_selectApplicationsByEndpoint_selectApplicationsByEndpoint_QNAME)) {
            return selectApplicationsByEndpoint_OPCODE;
        }
        if (name.equals(ns1_selectPISByAlive_selectPISByAlive_QNAME)) {
            return selectPISByAlive_OPCODE;
        }
        if (name.equals(ns1_updatePIS_updatePIS_QNAME)) {
            return updatePIS_OPCODE;
        }
        if (name.equals(ns1_deregisterPIS_deregisterPIS_QNAME)) {
            return deregisterPIS_OPCODE;
        }
        if (name.equals(ns1_selectPISById_selectPISById_QNAME)) {
            return selectPISById_OPCODE;
        }
        if (name.equals(ns1_selectPISByName_selectPISByName_QNAME)) {
            return selectPISByName_OPCODE;
        }
        if (name.equals(ns1_selectApplicationsByType_selectApplicationsByType_QNAME)) {
            return selectApplicationsByType_OPCODE;
        }
        if (name.equals(ns1_selectApplicationsByParentPISId_selectApplicationsByParentPISId_QNAME)) {
            return selectApplicationsByParentPISId_OPCODE;
        }
        if (name.equals(ns1_registerPIS_registerPIS_QNAME)) {
            return registerPIS_OPCODE;
        }
        return super.getOpcodeForFirstBodyElementName(name);
    }
    
    
    private Method internalGetMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
        
        Method theMethod = null;
        
        switch(opcode) {
            case deregisterApplication_OPCODE:
                {
                    Class[] carray = { org.egso.comms.nds.types.Application.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("deregisterApplication", carray);
                }
                break;
            
            case selectPISByEndpoint_OPCODE:
                {
                    Class[] carray = { java.net.URI.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("selectPISByEndpoint", carray);
                }
                break;
            
            case selectApplicationById_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("selectApplicationById", carray);
                }
                break;
            
            case registerApplication_OPCODE:
                {
                    Class[] carray = { org.egso.comms.nds.types.Application.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("registerApplication", carray);
                }
                break;
            
            case selectApplicationsByName_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("selectApplicationsByName", carray);
                }
                break;
            
            case updateApplication_OPCODE:
                {
                    Class[] carray = { org.egso.comms.nds.types.Application.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("updateApplication", carray);
                }
                break;
            
            case selectApplicationsByAlive_OPCODE:
                {
                    Class[] carray = { Boolean.TYPE };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("selectApplicationsByAlive", carray);
                }
                break;
            
            case selectPISByApplicationId_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("selectPISByApplicationId", carray);
                }
                break;
            
            case selectApplicationsByEndpoint_OPCODE:
                {
                    Class[] carray = { java.net.URI.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("selectApplicationsByEndpoint", carray);
                }
                break;
            
            case selectPISByAlive_OPCODE:
                {
                    Class[] carray = { Boolean.TYPE };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("selectPISByAlive", carray);
                }
                break;
            
            case updatePIS_OPCODE:
                {
                    Class[] carray = { org.egso.comms.nds.types.PIS.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("updatePIS", carray);
                }
                break;
            
            case deregisterPIS_OPCODE:
                {
                    Class[] carray = { org.egso.comms.nds.types.PIS.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("deregisterPIS", carray);
                }
                break;
            
            case selectPISById_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("selectPISById", carray);
                }
                break;
            
            case selectPISByName_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("selectPISByName", carray);
                }
                break;
            
            case selectApplicationsByType_OPCODE:
                {
                    Class[] carray = { java.net.URI.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("selectApplicationsByType", carray);
                }
                break;
            
            case selectApplicationsByParentPISId_OPCODE:
                {
                    Class[] carray = { java.lang.String.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("selectApplicationsByParentPISId", carray);
                }
                break;
            
            case registerPIS_OPCODE:
                {
                    Class[] carray = { org.egso.comms.nds.types.PIS.class };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("registerPIS", carray);
                }
                break;
            
            case synchronizeDirectory_OPCODE:
                {
                    Class[] carray = {  };
                    theMethod = (org.egso.comms.nds.wsdl.NDS_PortType.class).getMethod("synchronizeDirectory", carray);
                }
                break;
            
            default:
        }
        return theMethod;
    }
    
    private Method[] methodMap = new Method[18];
    
    /*
     * This method returns the Method Obj for a specified opcode.
     */
    public Method getMethodForOpcode(int opcode) throws ClassNotFoundException, NoSuchMethodException {
         
        if (opcode <= InternalSOAPMessage.NO_OPERATION ) {
            return null;
        }
         
        if (opcode >= 18 ) {
            return null;
        }
         
        if (methodMap[opcode] == null)  {
            methodMap[opcode] = internalGetMethodForOpcode(opcode);
        }
         
        return methodMap[opcode];
    }
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    private void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns1_myPISList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.egso.comms.nds.types.PISList.class, ns1_PISList_TYPE_QNAME);
        ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer = (CombinedSerializer)registry.getSerializer("", java.net.URI.class, ns2_anyURI_TYPE_QNAME);
        ns1_myApplicationList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.egso.comms.nds.types.ApplicationList.class, ns1_ApplicationList_TYPE_QNAME);
        ns2_myns2_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
        ns1_myPIS_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.egso.comms.nds.types.PIS.class, ns1_PIS_TYPE_QNAME);
        ns1_myApplication_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.egso.comms.nds.types.Application.class, ns1_Application_TYPE_QNAME);
        ns2_myns2__boolean__boolean_Boolean_Serializer = (CombinedSerializer)registry.getSerializer("", boolean.class, ns2_boolean_TYPE_QNAME);
    }
    
    private static final QName portName = new QName("urn:org.egso.comms/nds/wsdl/NDS", "NDSPort");
    private static final int deregisterApplication_OPCODE = 0;
    private static final int selectPISByEndpoint_OPCODE = 1;
    private static final int selectApplicationById_OPCODE = 2;
    private static final int registerApplication_OPCODE = 3;
    private static final int selectApplicationsByName_OPCODE = 4;
    private static final int updateApplication_OPCODE = 5;
    private static final int selectApplicationsByAlive_OPCODE = 6;
    private static final int selectPISByApplicationId_OPCODE = 7;
    private static final int selectApplicationsByEndpoint_OPCODE = 8;
    private static final int selectPISByAlive_OPCODE = 9;
    private static final int updatePIS_OPCODE = 10;
    private static final int deregisterPIS_OPCODE = 11;
    private static final int selectPISById_OPCODE = 12;
    private static final int selectPISByName_OPCODE = 13;
    private static final int selectApplicationsByType_OPCODE = 14;
    private static final int selectApplicationsByParentPISId_OPCODE = 15;
    private static final int registerPIS_OPCODE = 16;
    private static final int synchronizeDirectory_OPCODE = 17;
    private static final QName ns1_deregisterApplication_deregisterApplication_QNAME = new QName("urn:org.egso.comms/nds/types/", "deregisterApplication");
    private static final QName ns1_Application_TYPE_QNAME = new QName("urn:org.egso.comms/nds/types/", "Application");
    private CombinedSerializer ns1_myApplication_LiteralSerializer;
    private static final QName ns1_selectPISByEndpoint_selectPISByEndpoint_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectPISByEndpoint");
    private static final QName ns2_anyURI_TYPE_QNAME = SchemaConstants.QNAME_TYPE_ANY_URI;
    private CombinedSerializer ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer;
    private static final QName ns1_selectPISByEndpoint_pisList_QNAME = new QName("urn:org.egso.comms/nds/types/", "pisList");
    private static final QName ns1_PISList_TYPE_QNAME = new QName("urn:org.egso.comms/nds/types/", "PISList");
    private CombinedSerializer ns1_myPISList_LiteralSerializer;
    private static final QName ns1_selectApplicationById_selectApplicationsById_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectApplicationsById");
    private static final QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns2_myns2_string__java_lang_String_String_Serializer;
    private static final QName ns1_selectApplicationById_application_QNAME = new QName("urn:org.egso.comms/nds/types/", "application");
    private static final QName ns1_registerApplication_registerApplication_QNAME = new QName("urn:org.egso.comms/nds/types/", "registerApplication");
    private static final QName ns1_registerApplication_application_QNAME = new QName("urn:org.egso.comms/nds/types/", "application");
    private static final QName ns1_selectApplicationsByName_selectApplicationsByName_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectApplicationsByName");
    private static final QName ns1_selectApplicationsByName_applicationList_QNAME = new QName("urn:org.egso.comms/nds/types/", "applicationList");
    private static final QName ns1_ApplicationList_TYPE_QNAME = new QName("urn:org.egso.comms/nds/types/", "ApplicationList");
    private CombinedSerializer ns1_myApplicationList_LiteralSerializer;
    private static final QName ns1_updateApplication_updateApplication_QNAME = new QName("urn:org.egso.comms/nds/types/", "updateApplication");
    private static final QName ns1_selectApplicationsByAlive_selectApplicationsByAlive_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectApplicationsByAlive");
    private static final QName ns2_boolean_TYPE_QNAME = SchemaConstants.QNAME_TYPE_BOOLEAN;
    private CombinedSerializer ns2_myns2__boolean__boolean_Boolean_Serializer;
    private static final QName ns1_selectApplicationsByAlive_applicationList_QNAME = new QName("urn:org.egso.comms/nds/types/", "applicationList");
    private static final QName ns1_selectPISByApplicationId_selectPISByApplicationId_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectPISByApplicationId");
    private static final QName ns1_selectPISByApplicationId_pisList_QNAME = new QName("urn:org.egso.comms/nds/types/", "pisList");
    private static final QName ns1_selectApplicationsByEndpoint_selectApplicationsByEndpoint_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectApplicationsByEndpoint");
    private static final QName ns1_selectApplicationsByEndpoint_applicationList_QNAME = new QName("urn:org.egso.comms/nds/types/", "applicationList");
    private static final QName ns1_selectPISByAlive_selectPISByAlive_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectPISByAlive");
    private static final QName ns1_selectPISByAlive_pisList_QNAME = new QName("urn:org.egso.comms/nds/types/", "pisList");
    private static final QName ns1_updatePIS_updatePIS_QNAME = new QName("urn:org.egso.comms/nds/types/", "updatePIS");
    private static final QName ns1_PIS_TYPE_QNAME = new QName("urn:org.egso.comms/nds/types/", "PIS");
    private CombinedSerializer ns1_myPIS_LiteralSerializer;
    private static final QName ns1_deregisterPIS_deregisterPIS_QNAME = new QName("urn:org.egso.comms/nds/types/", "deregisterPIS");
    private static final QName ns1_selectPISById_selectPISById_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectPISById");
    private static final QName ns1_selectPISById_pis_QNAME = new QName("urn:org.egso.comms/nds/types/", "pis");
    private static final QName ns1_selectPISByName_selectPISByName_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectPISByName");
    private static final QName ns1_selectPISByName_pisList_QNAME = new QName("urn:org.egso.comms/nds/types/", "pisList");
    private static final QName ns1_selectApplicationsByType_selectApplicationsByType_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectApplicationsByType");
    private static final QName ns1_selectApplicationsByType_applicationList_QNAME = new QName("urn:org.egso.comms/nds/types/", "applicationList");
    private static final QName ns1_selectApplicationsByParentPISId_selectApplicationsByParentPISId_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectApplicationsByParentPISId");
    private static final QName ns1_selectApplicationsByParentPISId_applicationList_QNAME = new QName("urn:org.egso.comms/nds/types/", "applicationList");
    private static final QName ns1_registerPIS_registerPIS_QNAME = new QName("urn:org.egso.comms/nds/types/", "registerPIS");
    private static final QName ns1_registerPIS_pis_QNAME = new QName("urn:org.egso.comms/nds/types/", "pis");
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "urn:org.egso.comms/nds/types/"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
