// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.2_01, build R40)
// Generated source version: 1.1.2

package org.egso.comms.nds.wsdl;

import java.rmi.RemoteException;

import javax.xml.namespace.QName;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.handler.HandlerChain;

import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.StreamingSenderState;
import com.sun.xml.rpc.client.http.HttpClientTransport;
import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.DummySerializer;
import com.sun.xml.rpc.encoding.InternalTypeMappingRegistry;
import com.sun.xml.rpc.encoding.SOAPDeserializationContext;
import com.sun.xml.rpc.encoding.SOAPDeserializationState;
import com.sun.xml.rpc.soap.message.InternalSOAPMessage;
import com.sun.xml.rpc.soap.message.SOAPBlockInfo;
import com.sun.xml.rpc.soap.streaming.SOAPNamespaceConstants;
import com.sun.xml.rpc.streaming.XMLReader;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;

public class NDS_PortType_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements org.egso.comms.nds.wsdl.NDS_PortType {
    
    
    
    /*
     *  public constructor
     */
    public NDS_PortType_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "REPLACE_WITH_ACTUAL_URL");
    }
    
    
    /*
     *  implementation of deregisterApplication
     */
    public void deregisterApplication(org.egso.comms.nds.types.Application application)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deregisterApplication_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deregisterApplication_deregisterApplication_QNAME);
            _bodyBlock.setValue(application);
            _bodyBlock.setSerializer(ns1_myApplication_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of selectPISByEndpoint
     */
    public org.egso.comms.nds.types.PISList selectPISByEndpoint(java.net.URI endpoint)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(selectPISByEndpoint_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_selectPISByEndpoint_selectPISByEndpoint_QNAME);
            _bodyBlock.setValue(endpoint);
            _bodyBlock.setSerializer(ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            org.egso.comms.nds.types.PISList _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (org.egso.comms.nds.types.PISList)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (org.egso.comms.nds.types.PISList)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of selectApplicationById
     */
    public org.egso.comms.nds.types.Application selectApplicationById(java.lang.String id)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(selectApplicationById_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_selectApplicationById_selectApplicationsById_QNAME);
            _bodyBlock.setValue(id);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            org.egso.comms.nds.types.Application _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (org.egso.comms.nds.types.Application)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (org.egso.comms.nds.types.Application)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of registerApplication
     */
    public org.egso.comms.nds.types.Application registerApplication(org.egso.comms.nds.types.Application application)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(registerApplication_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_registerApplication_registerApplication_QNAME);
            _bodyBlock.setValue(application);
            _bodyBlock.setSerializer(ns1_myApplication_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            org.egso.comms.nds.types.Application _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (org.egso.comms.nds.types.Application)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (org.egso.comms.nds.types.Application)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of selectApplicationsByName
     */
    public org.egso.comms.nds.types.ApplicationList selectApplicationsByName(java.lang.String name)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(selectApplicationsByName_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByName_selectApplicationsByName_QNAME);
            _bodyBlock.setValue(name);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            org.egso.comms.nds.types.ApplicationList _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (org.egso.comms.nds.types.ApplicationList)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (org.egso.comms.nds.types.ApplicationList)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of updateApplication
     */
    public void updateApplication(org.egso.comms.nds.types.Application application)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(updateApplication_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_updateApplication_updateApplication_QNAME);
            _bodyBlock.setValue(application);
            _bodyBlock.setSerializer(ns1_myApplication_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of selectApplicationsByAlive
     */
    public org.egso.comms.nds.types.ApplicationList selectApplicationsByAlive(boolean alive)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(selectApplicationsByAlive_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByAlive_selectApplicationsByAlive_QNAME);
            _bodyBlock.setValue(new Boolean(alive));
            _bodyBlock.setSerializer(ns2_myns2__boolean__boolean_Boolean_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            org.egso.comms.nds.types.ApplicationList _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (org.egso.comms.nds.types.ApplicationList)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (org.egso.comms.nds.types.ApplicationList)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of selectPISByApplicationId
     */
    public org.egso.comms.nds.types.PISList selectPISByApplicationId(java.lang.String applicationId)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(selectPISByApplicationId_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_selectPISByApplicationId_selectPISByApplicationId_QNAME);
            _bodyBlock.setValue(applicationId);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            org.egso.comms.nds.types.PISList _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (org.egso.comms.nds.types.PISList)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (org.egso.comms.nds.types.PISList)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of selectApplicationsByEndpoint
     */
    public org.egso.comms.nds.types.ApplicationList selectApplicationsByEndpoint(java.net.URI endpoint)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(selectApplicationsByEndpoint_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByEndpoint_selectApplicationsByEndpoint_QNAME);
            _bodyBlock.setValue(endpoint);
            _bodyBlock.setSerializer(ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            org.egso.comms.nds.types.ApplicationList _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (org.egso.comms.nds.types.ApplicationList)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (org.egso.comms.nds.types.ApplicationList)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of selectPISByAlive
     */
    public org.egso.comms.nds.types.PISList selectPISByAlive(boolean alive)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(selectPISByAlive_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_selectPISByAlive_selectPISByAlive_QNAME);
            _bodyBlock.setValue(new Boolean(alive));
            _bodyBlock.setSerializer(ns2_myns2__boolean__boolean_Boolean_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            org.egso.comms.nds.types.PISList _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (org.egso.comms.nds.types.PISList)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (org.egso.comms.nds.types.PISList)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of updatePIS
     */
    public void updatePIS(org.egso.comms.nds.types.PIS pis)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(updatePIS_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_updatePIS_updatePIS_QNAME);
            _bodyBlock.setValue(pis);
            _bodyBlock.setSerializer(ns1_myPIS_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of deregisterPIS
     */
    public void deregisterPIS(org.egso.comms.nds.types.PIS pis)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(deregisterPIS_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_deregisterPIS_deregisterPIS_QNAME);
            _bodyBlock.setValue(pis);
            _bodyBlock.setSerializer(ns1_myPIS_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of selectPISById
     */
    public org.egso.comms.nds.types.PIS selectPISById(java.lang.String id)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(selectPISById_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_selectPISById_selectPISById_QNAME);
            _bodyBlock.setValue(id);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            org.egso.comms.nds.types.PIS _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (org.egso.comms.nds.types.PIS)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (org.egso.comms.nds.types.PIS)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of selectPISByName
     */
    public org.egso.comms.nds.types.PISList selectPISByName(java.lang.String name)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(selectPISByName_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_selectPISByName_selectPISByName_QNAME);
            _bodyBlock.setValue(name);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            org.egso.comms.nds.types.PISList _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (org.egso.comms.nds.types.PISList)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (org.egso.comms.nds.types.PISList)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of selectApplicationsByType
     */
    public org.egso.comms.nds.types.ApplicationList selectApplicationsByType(java.net.URI type)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(selectApplicationsByType_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByType_selectApplicationsByType_QNAME);
            _bodyBlock.setValue(type);
            _bodyBlock.setSerializer(ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            org.egso.comms.nds.types.ApplicationList _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (org.egso.comms.nds.types.ApplicationList)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (org.egso.comms.nds.types.ApplicationList)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of selectApplicationsByParentPISId
     */
    public org.egso.comms.nds.types.ApplicationList selectApplicationsByParentPISId(java.lang.String parentPISId)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(selectApplicationsByParentPISId_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByParentPISId_selectApplicationsByParentPISId_QNAME);
            _bodyBlock.setValue(parentPISId);
            _bodyBlock.setSerializer(ns2_myns2_string__java_lang_String_String_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            org.egso.comms.nds.types.ApplicationList _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (org.egso.comms.nds.types.ApplicationList)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (org.egso.comms.nds.types.ApplicationList)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of registerPIS
     */
    public org.egso.comms.nds.types.PIS registerPIS(org.egso.comms.nds.types.PIS pis)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(registerPIS_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_registerPIS_registerPIS_QNAME);
            _bodyBlock.setValue(pis);
            _bodyBlock.setSerializer(ns1_myPIS_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            org.egso.comms.nds.types.PIS _result = null;
            Object _responseObj = _state.getResponse().getBody().getValue();
            if (_responseObj instanceof SOAPDeserializationState) {
                _result = (org.egso.comms.nds.types.PIS)((SOAPDeserializationState) _responseObj).getInstance();
            } else {
                _result = (org.egso.comms.nds.types.PIS)_responseObj;
            }
            
            return _result;
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of synchronizeDirectory
     */
    public void synchronizeDirectory()
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(synchronizeDirectory_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(null);
            _bodyBlock.setSerializer(DummySerializer.getInstance());
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case deregisterApplication_OPCODE:
                _deserialize_deregisterApplication(bodyReader, deserializationContext, state);
                break;
            case selectPISByEndpoint_OPCODE:
                _deserialize_selectPISByEndpoint(bodyReader, deserializationContext, state);
                break;
            case selectApplicationById_OPCODE:
                _deserialize_selectApplicationById(bodyReader, deserializationContext, state);
                break;
            case registerApplication_OPCODE:
                _deserialize_registerApplication(bodyReader, deserializationContext, state);
                break;
            case selectApplicationsByName_OPCODE:
                _deserialize_selectApplicationsByName(bodyReader, deserializationContext, state);
                break;
            case updateApplication_OPCODE:
                _deserialize_updateApplication(bodyReader, deserializationContext, state);
                break;
            case selectApplicationsByAlive_OPCODE:
                _deserialize_selectApplicationsByAlive(bodyReader, deserializationContext, state);
                break;
            case selectPISByApplicationId_OPCODE:
                _deserialize_selectPISByApplicationId(bodyReader, deserializationContext, state);
                break;
            case selectApplicationsByEndpoint_OPCODE:
                _deserialize_selectApplicationsByEndpoint(bodyReader, deserializationContext, state);
                break;
            case selectPISByAlive_OPCODE:
                _deserialize_selectPISByAlive(bodyReader, deserializationContext, state);
                break;
            case updatePIS_OPCODE:
                _deserialize_updatePIS(bodyReader, deserializationContext, state);
                break;
            case deregisterPIS_OPCODE:
                _deserialize_deregisterPIS(bodyReader, deserializationContext, state);
                break;
            case selectPISById_OPCODE:
                _deserialize_selectPISById(bodyReader, deserializationContext, state);
                break;
            case selectPISByName_OPCODE:
                _deserialize_selectPISByName(bodyReader, deserializationContext, state);
                break;
            case selectApplicationsByType_OPCODE:
                _deserialize_selectApplicationsByType(bodyReader, deserializationContext, state);
                break;
            case selectApplicationsByParentPISId_OPCODE:
                _deserialize_selectApplicationsByParentPISId(bodyReader, deserializationContext, state);
                break;
            case registerPIS_OPCODE:
                _deserialize_registerPIS(bodyReader, deserializationContext, state);
                break;
            case synchronizeDirectory_OPCODE:
                _deserialize_synchronizeDirectory(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", Integer.toString(opcode));
        }
    }
    /*
     * This method handles the case of an empty SOAP body.
     */
    protected void _handleEmptyBody(XMLReader reader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
    }
    
    
    
    /*
     * This method deserializes the body of the deregisterApplication operation.
     */
    private void _deserialize_deregisterApplication(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectPISByEndpoint operation.
     */
    private void _deserialize_selectPISByEndpoint(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myPISListObj =
            ns1_myPISList_LiteralSerializer.deserialize(ns1_selectPISByEndpoint_pisList_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISByEndpoint_pisList_QNAME);
        bodyBlock.setValue(myPISListObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectApplicationById operation.
     */
    private void _deserialize_selectApplicationById(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myApplicationObj =
            ns1_myApplication_LiteralSerializer.deserialize(ns1_selectApplicationById_application_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationById_application_QNAME);
        bodyBlock.setValue(myApplicationObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the registerApplication operation.
     */
    private void _deserialize_registerApplication(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myApplicationObj =
            ns1_myApplication_LiteralSerializer.deserialize(ns1_registerApplication_application_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_registerApplication_application_QNAME);
        bodyBlock.setValue(myApplicationObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectApplicationsByName operation.
     */
    private void _deserialize_selectApplicationsByName(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myApplicationListObj =
            ns1_myApplicationList_LiteralSerializer.deserialize(ns1_selectApplicationsByName_applicationList_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByName_applicationList_QNAME);
        bodyBlock.setValue(myApplicationListObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the updateApplication operation.
     */
    private void _deserialize_updateApplication(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectApplicationsByAlive operation.
     */
    private void _deserialize_selectApplicationsByAlive(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myApplicationListObj =
            ns1_myApplicationList_LiteralSerializer.deserialize(ns1_selectApplicationsByAlive_applicationList_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByAlive_applicationList_QNAME);
        bodyBlock.setValue(myApplicationListObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectPISByApplicationId operation.
     */
    private void _deserialize_selectPISByApplicationId(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myPISListObj =
            ns1_myPISList_LiteralSerializer.deserialize(ns1_selectPISByApplicationId_pisList_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISByApplicationId_pisList_QNAME);
        bodyBlock.setValue(myPISListObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectApplicationsByEndpoint operation.
     */
    private void _deserialize_selectApplicationsByEndpoint(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myApplicationListObj =
            ns1_myApplicationList_LiteralSerializer.deserialize(ns1_selectApplicationsByEndpoint_applicationList_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByEndpoint_applicationList_QNAME);
        bodyBlock.setValue(myApplicationListObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectPISByAlive operation.
     */
    private void _deserialize_selectPISByAlive(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myPISListObj =
            ns1_myPISList_LiteralSerializer.deserialize(ns1_selectPISByAlive_pisList_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISByAlive_pisList_QNAME);
        bodyBlock.setValue(myPISListObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the updatePIS operation.
     */
    private void _deserialize_updatePIS(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the deregisterPIS operation.
     */
    private void _deserialize_deregisterPIS(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectPISById operation.
     */
    private void _deserialize_selectPISById(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myPISObj =
            ns1_myPIS_LiteralSerializer.deserialize(ns1_selectPISById_pis_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISById_pis_QNAME);
        bodyBlock.setValue(myPISObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectPISByName operation.
     */
    private void _deserialize_selectPISByName(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myPISListObj =
            ns1_myPISList_LiteralSerializer.deserialize(ns1_selectPISByName_pisList_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectPISByName_pisList_QNAME);
        bodyBlock.setValue(myPISListObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectApplicationsByType operation.
     */
    private void _deserialize_selectApplicationsByType(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myApplicationListObj =
            ns1_myApplicationList_LiteralSerializer.deserialize(ns1_selectApplicationsByType_applicationList_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByType_applicationList_QNAME);
        bodyBlock.setValue(myApplicationListObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the selectApplicationsByParentPISId operation.
     */
    private void _deserialize_selectApplicationsByParentPISId(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myApplicationListObj =
            ns1_myApplicationList_LiteralSerializer.deserialize(ns1_selectApplicationsByParentPISId_applicationList_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_selectApplicationsByParentPISId_applicationList_QNAME);
        bodyBlock.setValue(myApplicationListObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the registerPIS operation.
     */
    private void _deserialize_registerPIS(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        Object myPISObj =
            ns1_myPIS_LiteralSerializer.deserialize(ns1_registerPIS_pis_QNAME,
                bodyReader, deserializationContext);
        
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(ns1_registerPIS_pis_QNAME);
        bodyBlock.setValue(myPISObj);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the synchronizeDirectory operation.
     */
    private void _deserialize_synchronizeDirectory(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getResponse().setBody(bodyBlock);
    }
    
    
    
    protected String _getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    public String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_myPISList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.egso.comms.nds.types.PISList.class, ns1_PISList_TYPE_QNAME);
        ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer = (CombinedSerializer)registry.getSerializer("", java.net.URI.class, ns2_anyURI_TYPE_QNAME);
        ns1_myApplicationList_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.egso.comms.nds.types.ApplicationList.class, ns1_ApplicationList_TYPE_QNAME);
        ns2_myns2_string__java_lang_String_String_Serializer = (CombinedSerializer)registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
        ns1_myPIS_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.egso.comms.nds.types.PIS.class, ns1_PIS_TYPE_QNAME);
        ns1_myApplication_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.egso.comms.nds.types.Application.class, ns1_Application_TYPE_QNAME);
        ns2_myns2__boolean__boolean_Boolean_Serializer = (CombinedSerializer)registry.getSerializer("", boolean.class, ns2_boolean_TYPE_QNAME);
    }
    
    private static final QName _portName = new QName("urn:org.egso.comms/nds/wsdl/NDS", "NDSPort");
    private static final int deregisterApplication_OPCODE = 0;
    private static final int selectPISByEndpoint_OPCODE = 1;
    private static final int selectApplicationById_OPCODE = 2;
    private static final int registerApplication_OPCODE = 3;
    private static final int selectApplicationsByName_OPCODE = 4;
    private static final int updateApplication_OPCODE = 5;
    private static final int selectApplicationsByAlive_OPCODE = 6;
    private static final int selectPISByApplicationId_OPCODE = 7;
    private static final int selectApplicationsByEndpoint_OPCODE = 8;
    private static final int selectPISByAlive_OPCODE = 9;
    private static final int updatePIS_OPCODE = 10;
    private static final int deregisterPIS_OPCODE = 11;
    private static final int selectPISById_OPCODE = 12;
    private static final int selectPISByName_OPCODE = 13;
    private static final int selectApplicationsByType_OPCODE = 14;
    private static final int selectApplicationsByParentPISId_OPCODE = 15;
    private static final int registerPIS_OPCODE = 16;
    private static final int synchronizeDirectory_OPCODE = 17;
    private static final QName ns1_deregisterApplication_deregisterApplication_QNAME = new QName("urn:org.egso.comms/nds/types/", "deregisterApplication");
    private static final QName ns1_Application_TYPE_QNAME = new QName("urn:org.egso.comms/nds/types/", "Application");
    private CombinedSerializer ns1_myApplication_LiteralSerializer;
    private static final QName ns1_selectPISByEndpoint_selectPISByEndpoint_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectPISByEndpoint");
    private static final QName ns2_anyURI_TYPE_QNAME = SchemaConstants.QNAME_TYPE_ANY_URI;
    private CombinedSerializer ns2_myns2_anyURI__java_net_URI_AnyURI_Serializer;
    private static final QName ns1_selectPISByEndpoint_pisList_QNAME = new QName("urn:org.egso.comms/nds/types/", "pisList");
    private static final QName ns1_PISList_TYPE_QNAME = new QName("urn:org.egso.comms/nds/types/", "PISList");
    private CombinedSerializer ns1_myPISList_LiteralSerializer;
    private static final QName ns1_selectApplicationById_selectApplicationsById_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectApplicationsById");
    private static final QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns2_myns2_string__java_lang_String_String_Serializer;
    private static final QName ns1_selectApplicationById_application_QNAME = new QName("urn:org.egso.comms/nds/types/", "application");
    private static final QName ns1_registerApplication_registerApplication_QNAME = new QName("urn:org.egso.comms/nds/types/", "registerApplication");
    private static final QName ns1_registerApplication_application_QNAME = new QName("urn:org.egso.comms/nds/types/", "application");
    private static final QName ns1_selectApplicationsByName_selectApplicationsByName_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectApplicationsByName");
    private static final QName ns1_selectApplicationsByName_applicationList_QNAME = new QName("urn:org.egso.comms/nds/types/", "applicationList");
    private static final QName ns1_ApplicationList_TYPE_QNAME = new QName("urn:org.egso.comms/nds/types/", "ApplicationList");
    private CombinedSerializer ns1_myApplicationList_LiteralSerializer;
    private static final QName ns1_updateApplication_updateApplication_QNAME = new QName("urn:org.egso.comms/nds/types/", "updateApplication");
    private static final QName ns1_selectApplicationsByAlive_selectApplicationsByAlive_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectApplicationsByAlive");
    private static final QName ns2_boolean_TYPE_QNAME = SchemaConstants.QNAME_TYPE_BOOLEAN;
    private CombinedSerializer ns2_myns2__boolean__boolean_Boolean_Serializer;
    private static final QName ns1_selectApplicationsByAlive_applicationList_QNAME = new QName("urn:org.egso.comms/nds/types/", "applicationList");
    private static final QName ns1_selectPISByApplicationId_selectPISByApplicationId_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectPISByApplicationId");
    private static final QName ns1_selectPISByApplicationId_pisList_QNAME = new QName("urn:org.egso.comms/nds/types/", "pisList");
    private static final QName ns1_selectApplicationsByEndpoint_selectApplicationsByEndpoint_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectApplicationsByEndpoint");
    private static final QName ns1_selectApplicationsByEndpoint_applicationList_QNAME = new QName("urn:org.egso.comms/nds/types/", "applicationList");
    private static final QName ns1_selectPISByAlive_selectPISByAlive_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectPISByAlive");
    private static final QName ns1_selectPISByAlive_pisList_QNAME = new QName("urn:org.egso.comms/nds/types/", "pisList");
    private static final QName ns1_updatePIS_updatePIS_QNAME = new QName("urn:org.egso.comms/nds/types/", "updatePIS");
    private static final QName ns1_PIS_TYPE_QNAME = new QName("urn:org.egso.comms/nds/types/", "PIS");
    private CombinedSerializer ns1_myPIS_LiteralSerializer;
    private static final QName ns1_deregisterPIS_deregisterPIS_QNAME = new QName("urn:org.egso.comms/nds/types/", "deregisterPIS");
    private static final QName ns1_selectPISById_selectPISById_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectPISById");
    private static final QName ns1_selectPISById_pis_QNAME = new QName("urn:org.egso.comms/nds/types/", "pis");
    private static final QName ns1_selectPISByName_selectPISByName_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectPISByName");
    private static final QName ns1_selectPISByName_pisList_QNAME = new QName("urn:org.egso.comms/nds/types/", "pisList");
    private static final QName ns1_selectApplicationsByType_selectApplicationsByType_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectApplicationsByType");
    private static final QName ns1_selectApplicationsByType_applicationList_QNAME = new QName("urn:org.egso.comms/nds/types/", "applicationList");
    private static final QName ns1_selectApplicationsByParentPISId_selectApplicationsByParentPISId_QNAME = new QName("urn:org.egso.comms/nds/types/", "selectApplicationsByParentPISId");
    private static final QName ns1_selectApplicationsByParentPISId_applicationList_QNAME = new QName("urn:org.egso.comms/nds/types/", "applicationList");
    private static final QName ns1_registerPIS_registerPIS_QNAME = new QName("urn:org.egso.comms/nds/types/", "registerPIS");
    private static final QName ns1_registerPIS_pis_QNAME = new QName("urn:org.egso.comms/nds/types/", "pis");
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "urn:org.egso.comms/nds/types/"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
