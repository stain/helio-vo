// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.2_01, build R40)
// Generated source version: 1.1.2

package org.egso.comms.eis.wsdl;

import java.rmi.RemoteException;

import javax.xml.namespace.QName;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.handler.HandlerChain;

import com.sun.xml.rpc.client.SenderException;
import com.sun.xml.rpc.client.StreamingSenderState;
import com.sun.xml.rpc.client.http.HttpClientTransport;
import com.sun.xml.rpc.encoding.CombinedSerializer;
import com.sun.xml.rpc.encoding.InternalTypeMappingRegistry;
import com.sun.xml.rpc.encoding.SOAPDeserializationContext;
import com.sun.xml.rpc.soap.message.InternalSOAPMessage;
import com.sun.xml.rpc.soap.message.SOAPBlockInfo;
import com.sun.xml.rpc.soap.streaming.SOAPNamespaceConstants;
import com.sun.xml.rpc.streaming.XMLReader;

public class Application_PortType_Stub
    extends com.sun.xml.rpc.client.StubBase
    implements org.egso.comms.eis.wsdl.Application_PortType {
    
    
    
    /*
     *  public constructor
     */
    public Application_PortType_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "REPLACE_WITH_ACTUAL_URL");
    }
    
    
    /*
     *  implementation of returnMessage
     */
    public void returnMessage(org.egso.comms.pis.types.Message message)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(returnMessage_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_returnMessage_returnMessage_QNAME);
            _bodyBlock.setValue(message);
            _bodyBlock.setSerializer(ns1_myMessage_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    /*
     *  implementation of receiveMessage
     */
    public void receiveMessage(org.egso.comms.pis.types.Message message)
        throws java.rmi.RemoteException {
        
        try {
            
            StreamingSenderState _state = _start(_handlerChain);
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(receiveMessage_OPCODE);
            
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_receiveMessage_receiveMessage_QNAME);
            _bodyBlock.setValue(message);
            _bodyBlock.setSerializer(ns1_myMessage_LiteralSerializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty(HttpClientTransport.HTTP_SOAPACTION_PROPERTY, "");
            
            _send((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
            
            
        } catch (RemoteException e) {
            // let this one through unchanged
            throw e;
        } catch (JAXRPCException e) {
            throw new RemoteException(e.getMessage(), e);
        } catch (Exception e) {
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            } else {
                throw new RemoteException(e.getMessage(), e);
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            case returnMessage_OPCODE:
                _deserialize_returnMessage(bodyReader, deserializationContext, state);
                break;
            case receiveMessage_OPCODE:
                _deserialize_receiveMessage(bodyReader, deserializationContext, state);
                break;
            default:
                throw new SenderException("sender.response.unrecognizedOperation", Integer.toString(opcode));
        }
    }
    /*
     * This method handles the case of an empty SOAP body.
     */
    protected void _handleEmptyBody(XMLReader reader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
    }
    
    
    
    /*
     * This method deserializes the body of the returnMessage operation.
     */
    private void _deserialize_returnMessage(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getResponse().setBody(bodyBlock);
    }
    
    /*
     * This method deserializes the body of the receiveMessage operation.
     */
    private void _deserialize_receiveMessage(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        SOAPBlockInfo bodyBlock = new SOAPBlockInfo(null);
        state.getResponse().setBody(bodyBlock);
    }
    
    
    
    protected String _getDefaultEnvelopeEncodingStyle() {
        return null;
    }
    
    public String _getImplicitEnvelopeEncodingStyle() {
        return "";
    }
    
    public String _getEncodingStyle() {
        return SOAPNamespaceConstants.ENCODING;
    }
    
    public void _setEncodingStyle(String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_myMessage_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", org.egso.comms.pis.types.Message.class, ns1_Message_TYPE_QNAME);
    }
    
    private static final QName _portName = new QName("urn:org.egso.comms/eis/wsdl/Application", "ApplicationPort");
    private static final int returnMessage_OPCODE = 0;
    private static final int receiveMessage_OPCODE = 1;
    private static final QName ns1_returnMessage_returnMessage_QNAME = new QName("urn:org.egso.comms/pis/types/", "returnMessage");
    private static final QName ns1_Message_TYPE_QNAME = new QName("urn:org.egso.comms/pis/types/", "Message");
    private CombinedSerializer ns1_myMessage_LiteralSerializer;
    private static final QName ns1_receiveMessage_receiveMessage_QNAME = new QName("urn:org.egso.comms/pis/types/", "receiveMessage");
    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "urn:org.egso.comms/pis/types/"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
}
