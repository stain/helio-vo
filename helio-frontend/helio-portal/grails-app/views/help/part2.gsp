<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Part 2: Concepts behind the HFE</title>
</head>
<body>
  <h2>Part 2: Concepts behind den HELIO Front End</h2>
   <p>The HELIO Front End (HFE) is a web portal that provides access to all services provided by
   HELIO. The HFE is intended for novice users that do not want to bother with the internal of
   the system. Thus the HFE focuses on those use cases that suite a majority of HELIO users.
   More advanced functionality is offered through the HELIO IDL API, the service specific
   user interfaces and the HELIO Java API. They are described in separate documents.</p>
   
   <p>The HFE builds on two core approaches: data centricity and task orientation. The data
   centred approach treats data objects as the main entities in the user interface. The task-
   oriented approach offers a variety of predefined tasks to solve basic and advanced use cases.</p>
   
   <p>The data-centric approach reflects that users are typically interested in data rather than in
   functions applied to the data or algorithms. The HFE data objects are accessible through the
   'data cart'. The data cart is a GUI element placed at a prominent position right below the
   main menu. The content of data cart can be compared to the variables in a scripting
   environment such as IDL. A variable contains a data object. Functions or procedures are
   applied to this variable in order to process or visualise the data object.</p>
   
   <p>The task-oriented approach hides the complexity of the underlying service calls. A
   combination of services calls is summarized in a task. Moreover, a task has some knowledge
   about the data it processes and thus relieves the user from having to learn the insights of the
   HELIO data model.</p>
   
   <p>The task-oriented approach of the HFE distinguishes it from both normal web applications,
   which are more workflow-oriented, and traditional scientific systems, which are function-
   oriented. In a function-oriented approach, input data is feed into a function, processed and
   new data is generated; this is comparable to a traditional scientific data analysis system,
   where the users need to know the details of the data, apply a function to it, and exactly know
   what they can expect back, but where there is no knowledge in the system of the nature of
   the input data or results.</p>
   
   <p>By contrast, in a task-oriented system, the data processing is done at an abstract level from
   the user's perspective. This means that for a given data product, the user is presented with a
   set of tasks that can be applied to this data. These tasks are presented in natural language
   like: "Get observations for a given time range"â€š "See what instruments covered this period",
   etc. This task-oriented approach supports the novice users to perform common tasks without
   having deep knowledge of the detailed science, allowing them to perform many analyses
   without having to learn the system in depth, while not preventing more advanced users from
   working with the data. This is supported through the use of simple data management tasks,
   which retrieve the data, join data tables, and store the data products.</p>
   
   <p>The input data to a task may consist of: 1) manually specified data, 2) data coming from a
   HELIO service such as the event catalogue or feature catalogue, or 3) data from an external
   source, such as a VOTable created by some scripting language. Most tasks are mapped to a
   query or processing service that runs in the HELIO infrastructure.</p>
   
   <p>The output data product generated by the task is either a VOTable document, an image or a
   FITS file. Parts of VOTable documents may be used as input to further tasks or downloaded
   to the users ' local system for longer-term storage or specialist analysis.</p>
  
  <h2>User interaction pattern</h2>
  <p>The way of using data and tasks in the HELIO portal follows a generic user interaction pattern.</p>

  <ol start="1" type="1">
    <li><i>Select a task to be executed</i>. Tasks are selected through a pull down menu.</li>
    <li><i>Gather the input parameters required for the selected task</i>. The input parameters may be entered manually or they may be reused from a
      previously executed task. Generally, tasks have sensible defaults for most input parameters.<br /> 
      The HELIO portal provides customised dialogues for
      different kinds of input parameters. Commonly used input parameters such as date ranges or instruments are entered through a dedicated dialogue. For other
      types of input parameters HELIO provides a configurable, generic dialogue. The latter is used for workflow-specific parameters.</li>
    <li><i>Execute the task on the HELIO infrastructure</i>. Most tasks are connected directly to one or several HELIO web services. The portal shows a busy
      screen until a result is available.</li>
    <li><i>Visualise the result of the task</i>. Depending on the data type of the result, different tools are used for visualisation. It is even possible to
      have different visualisations for a data type; e.g. a table with time series can be represented as a plain HTML table or as a time line plot.</li>
    <li><i>Extract new input parameters from the result</i>. In many cases a user can extract new input parameters from a result. These parameters can be
      used as input for a succeeding task or to refine the current task. In a timeline plot a user can select a date range of interest. In a table of instruments
      the user can look for instruments with similar capabilities.</li>
    <li>Continue at step 1. The process can be repeated until the original question is sufficiently answered.</li>
  </ol>
  <p>In order to support sharing parameters between multiple tasks the portal introduces the concept of a data cart. The data cart is a dedicated area in the
    web interface, which allows collections of parameter values to persist and be managed. Parameters extracted from a task result will be stored in the data
    cart. Using the mouse they can be dragged from there and be dropped to the input area of another task.</p>
  
  <p>The data cart is inspired by shopping carts known from web shops. It accentuates the importance of data in scientific applications and thus reflects the
    astronomer's way of thinking in terms of data rather than procedures. Analysis of data is the main interest of a scientist. How to get to the data, e.g. which
    task to run, is less interesting.</p>
  
</body>
</html>